% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deploy.R
\name{deploy}
\alias{deploy}
\alias{deploy_minicran_package}
\title{Deployment Helpers for Internal Minicran Packages}
\usage{
deploy_minicran_package(drat_repo, commit_message = NULL, dry_run = FALSE)
}
\arguments{
\item{drat_repo}{\verb{[character]}\cr
The git repository to deploy to. This repository should store R packages
in a CRAN-like structure (as done for example by \pkg{drat}).}

\item{commit_message}{\verb{[character]}\cr
An optional git commit message. If not supplied, the message will be of the
form \verb{Update <pkg> to version <version>} with the values inferred from the
DESCRIPTION file.}

\item{dry_run}{\verb{[logical]}\cr
When \code{TRUE}, the final git commit/push steps are skipped.}
}
\description{
Builds and deploys a local package to a git repository in a cran-like
structure.

This git repository can then be served via
\href{https://rstudio.com/products/connect/}{RStudio Connect} and accessed as an
additional repository next to the main CRAN repository.
RStudio Connect crawls the repository in a defined internal and picks up new
changes automatically.
This requires to a RStudio Connect App published via "Import from git".

This is an alternative to hosting and using a private instance of
\href{https://rstudio.com/products/package-manager/}{RStudio Package Manager}.

The following tasks are executed:
\itemize{
\item Local package building
\item Adding the built package to temporary git clone of the upstream git repository
\item Rendering the drat package website
\item Committing the changes to the respective drat repo
}
}
\examples{
\dontrun{

deploy_local_package(drat_repo = "https://github.com/myuser/mydratrepo.git")
}

}
